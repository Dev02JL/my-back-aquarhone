#!/bin/bash

# Script de test pour v√©rifier les permissions d'un utilisateur standard

BASE_URL="https://localhost:8000/api"
USER_EMAIL="user@example.com"
USER_PASSWORD="password123"

echo "üß™ Test des permissions utilisateur non-admin"
echo "=============================================="

# 1. Inscription d'un nouvel utilisateur
echo -e "\n1Ô∏è‚É£  Inscription d'un nouvel utilisateur..."
REGISTER_RESPONSE=$(curl -s -X POST "$BASE_URL/auth/register" \
  -H "Content-Type: application/json" \
  -d "{
    \"email\": \"$USER_EMAIL\",
    \"password\": \"$USER_PASSWORD\"
  }")

echo "R√©ponse inscription: $REGISTER_RESPONSE"

# 1. Connexion utilisateur
echo -e "\n1Ô∏è‚É£  Connexion utilisateur..."
LOGIN_PAYLOAD=$(printf '{"email":"%s","password":"%s"}' "$USER_EMAIL" "$USER_PASSWORD")
LOGIN_RESPONSE=$(curl -s -L -k -X POST "$BASE_URL/auth/login" \
  -H "Content-Type: application/json" \
  -d "$LOGIN_PAYLOAD")

echo "R√©ponse connexion: $LOGIN_RESPONSE"

# Extraire le token JWT
TOKEN=$(echo $LOGIN_RESPONSE | grep -o '"token":"[^"]*"' | cut -d'"' -f4)

if [ -z "$TOKEN" ]; then
    echo "‚ùå Erreur: Impossible d'obtenir le token JWT"
    exit 1
fi

echo "‚úÖ Token JWT obtenu: ${TOKEN:0:20}..."

# 2. Test 1: Vue sur les activit√©s (user)
echo -e "\n2Ô∏è‚É£  Test 1: Vue sur les activit√©s (user)..."
ACTIVITIES_RESPONSE=$(curl -s -L -k -X GET "$BASE_URL/activities" \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/json")

echo "R√©ponse liste activit√©s: $ACTIVITIES_RESPONSE"

# Extraire le premier ID d'activit√© pour les tests suivants
FIRST_ACTIVITY_ID=$(echo $ACTIVITIES_RESPONSE | grep -o '"id":[0-9]*' | head -1 | cut -d':' -f2)

if [ -z "$FIRST_ACTIVITY_ID" ]; then
    echo "‚ùå Erreur: Aucune activit√© trouv√©e"
    exit 1
fi

echo "‚úÖ Premi√®re activit√© trouv√©e: ID $FIRST_ACTIVITY_ID"

# 3. Test 2: R√©servation d'une activit√© (user)
echo -e "\n3Ô∏è‚É£  Test 2: R√©servation d'une activit√© (user)..."
# Utiliser une date/heure future
FUTURE_DATE=$(date -d "+1 day" "+%Y-%m-%d 10:00:00")

RESERVATION_RESPONSE=$(curl -s -L -k -X POST "$BASE_URL/reservations" \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/json" \
  -d "{
    \"activityId\": $FIRST_ACTIVITY_ID,
    \"dateTime\": \"$FUTURE_DATE\"
  }")

echo "R√©ponse cr√©ation r√©servation: $RESERVATION_RESPONSE"

# Extraire l'ID de r√©servation
RESERVATION_ID=$(echo $RESERVATION_RESPONSE | grep -o '"id":[0-9]*' | head -1 | cut -d':' -f2)

if [ -z "$RESERVATION_ID" ]; then
    echo "‚ö†Ô∏è  Aucune r√©servation cr√©√©e (peut-√™tre pas de cr√©neaux disponibles)"
else
    echo "‚úÖ R√©servation cr√©√©e: ID $RESERVATION_ID"
fi

# 4. Test 3: Vue sur ses r√©servations (user)
echo -e "\n4Ô∏è‚É£  Test 3: Vue sur ses r√©servations (user)..."
MY_RESERVATIONS_RESPONSE=$(curl -s -L -k -X GET "$BASE_URL/reservations/me" \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/json")

echo "R√©ponse historique r√©servations: $MY_RESERVATIONS_RESPONSE"

# 5. Test 4: Tentative d'acc√®s √† la gestion des utilisateurs (user)
echo -e "\n5Ô∏è‚É£  Test 4: Tentative d'acc√®s √† la gestion des utilisateurs (user)..."
USERS_RESPONSE=$(curl -s -L -k -X GET "$BASE_URL/users" \
  -H "Authorization: Bearer $TOKEN" \
  -H "Content-Type: application/json")

echo "R√©ponse profil utilisateur: $USERS_RESPONSE"

echo -e "\nüéØ R√©sum√© des tests:"
echo "====================="
echo "‚úÖ Consultation des activit√©s: OK"
echo "‚úÖ Consultation des d√©tails d'activit√©: OK"
echo "‚úÖ Cr√©ation de r√©servation: OK"
echo "‚úÖ Consultation historique: OK"
echo "‚úÖ Profil utilisateur: OK"

echo -e "\nüéâ Tous les tests pour un utilisateur non-admin sont PASS√âS !" 