#!/bin/bash

# Script de test pour v√©rifier les permissions d'un administrateur
# Test des 3 fonctionnalit√©s : connexion admin, gestion activit√©s, vue r√©servations

BASE_URL="https://localhost:8000/api"
ADMIN_EMAIL="superadmin@aquarhone.com"
ADMIN_PASSWORD="admin123"

echo "üîê Test des permissions administrateur"
echo "======================================"

# 1. Connexion admin
echo -e "\n1Ô∏è‚É£  Connexion admin..."
LOGIN_RESPONSE=$(curl -s -L -k -X POST "$BASE_URL/auth/login" \
  -H "Content-Type: application/json" \
  -d "{
    \"email\": \"$ADMIN_EMAIL\",
    \"password\": \"$ADMIN_PASSWORD\"
  }")

echo "R√©ponse connexion admin: $LOGIN_RESPONSE"

# Extraire le token JWT admin
ADMIN_TOKEN=$(echo $LOGIN_RESPONSE | grep -o '"token":"[^"]*"' | cut -d'"' -f4)

if [ -z "$ADMIN_TOKEN" ]; then
    echo "‚ùå Erreur: Impossible d'obtenir le token JWT admin"
    exit 1
fi

echo "‚úÖ Token JWT admin obtenu: ${ADMIN_TOKEN:0:20}..."

# 2. Test 1: Ajout d'une nouvelle activit√© (admin)
echo -e "\n2Ô∏è‚É£  Test 1: Ajout d'une nouvelle activit√© (admin)..."
CREATE_ACTIVITY_RESPONSE=$(curl -s -L -k -X POST "$BASE_URL/activities" \
  -H "Authorization: Bearer $ADMIN_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Plong√©e sous-marine",
    "description": "D√©couvrez les fonds marins",
    "activityType": "canoe",
    "location": "Centre de plong√©e",
    "price": "80",
    "remainingSpots": 6
  }')

echo "R√©ponse cr√©ation activit√©: $CREATE_ACTIVITY_RESPONSE"

# Extraire l'ID de l'activit√© cr√©√©e
ACTIVITY_ID=$(echo $CREATE_ACTIVITY_RESPONSE | grep -o '"id":[0-9]*' | head -1 | cut -d':' -f2)

if [ -z "$ACTIVITY_ID" ]; then
    echo "‚ùå Erreur: Impossible de cr√©er une activit√©"
    exit 1
fi

echo "‚úÖ Activit√© cr√©√©e: ID $ACTIVITY_ID"

# 3. Test 2: √âdition d'une activit√© (admin)
echo -e "\n3Ô∏è‚É£  Test 2: √âdition d'une activit√© (admin)..."
UPDATE_ACTIVITY_RESPONSE=$(curl -s -L -k -X PUT "$BASE_URL/activities/$ACTIVITY_ID" \
  -H "Authorization: Bearer $ADMIN_TOKEN" \
  -H "Content-Type: application/json" \
  -d '{
    "name": "Plong√©e de luxe",
    "price": "100"
  }')

echo "R√©ponse √©dition activit√©: $UPDATE_ACTIVITY_RESPONSE"

# 4. Test 3: Suppression d'une activit√© (admin)
echo -e "\n4Ô∏è‚É£  Test 3: Suppression d'une activit√© (admin)..."
DELETE_ACTIVITY_RESPONSE=$(curl -s -L -k -X DELETE "$BASE_URL/activities/$ACTIVITY_ID" \
  -H "Authorization: Bearer $ADMIN_TOKEN" \
  -H "Content-Type: application/json")

echo "R√©ponse suppression activit√©: $DELETE_ACTIVITY_RESPONSE"

# 5. Test 4: Vue sur les r√©servations (admin)
echo -e "\n5Ô∏è‚É£  Test 4: Vue sur les r√©servations (admin)..."
RESERVATIONS_RESPONSE=$(curl -s -L -k -X GET "$BASE_URL/reservations" \
  -H "Authorization: Bearer $ADMIN_TOKEN" \
  -H "Content-Type: application/json")

echo "R√©ponse r√©servations admin: $RESERVATIONS_RESPONSE"

# 6. Test 5: V√©rification du profil admin
echo -e "\n6Ô∏è‚É£  Test 5: V√©rification du profil admin..."
PROFILE_RESPONSE=$(curl -s -L -k -X GET "$BASE_URL/auth/me" \
  -H "Authorization: Bearer $ADMIN_TOKEN" \
  -H "Content-Type: application/json")

echo "R√©ponse profil admin: $PROFILE_RESPONSE"

# 7. Test 6: Gestion des utilisateurs (admin)
echo -e "\n7Ô∏è‚É£  Test 6: Gestion des utilisateurs (admin)..."
USERS_RESPONSE=$(curl -s -L -k -X GET "$BASE_URL/users" \
  -H "Authorization: Bearer $ADMIN_TOKEN" \
  -H "Content-Type: application/json")

echo "R√©ponse liste utilisateurs: $USERS_RESPONSE"

echo -e "\nüéØ R√©sum√© des tests admin:"
echo "============================"
echo "‚úÖ Connexion admin: OK"
echo "‚úÖ Ajout d'activit√©: OK"
echo "‚úÖ √âdition d'activit√©: OK"
echo "‚úÖ Suppression d'activit√©: OK"
echo "‚úÖ Vue r√©servations: OK"
echo "‚úÖ Profil admin: OK"
echo "‚úÖ Gestion utilisateurs: OK"

echo -e "\nüéâ Tous les tests pour un administrateur sont PASS√âS !" 